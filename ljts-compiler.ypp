/* Tokens placés en ordre alphabétique pour mieux si retrouver. */
%token ASSIGNMENT CLASS
%token DEF ELSE EXTENDS
%token <std::string> IDENTIFIER 
%token IF
%token <int> INTEGER
%token IS NEW OBJECT OVERRIDE
%token <int> RELATIONAL_OPERATOR
%token RETURN
%token <std::string> STRING
%token THEN 
%token <std::string> TYPENAME
%token VAR

%type <Program*> Programme

%type <std::vector<Type*>*> LOptDecls
%type <std::vector<Type*>> LDecls
%type <Type*> Decl

%type <std::vector<Parameter>*> LOptParamDecl
%type <std::vector<Parameter>> LParamDecl
%type <Parameter> ParamDecl
%type <bool> OptVar

%type <Class*> ClassDecl
%type <std::string*> OptExtends

%type <std::tuple<std::vector<Field*>*, Constructor, std::vector<Method*>*> ClassDef ObjectDef

%{

#define YYDEBUG 1

#include "ljts-compiler.hpp"

Program* program = nullptr;

%}
%debug
%error-verbose

%right ASSIGNMENT
%right ELSE
%left RELATIONAL_OPERATOR
%left '+' '-'
%left '*' '/'
%nonassoc unary NEW
%left '.'

%%
Programme : LOptDecls Bloc                                                             { program = new Program($1, $2); }
;

LOptDecls : LDecls                                                                     { $$ = new std::vector<Type*>(); $$->insert(std::end(*$$), std::begin($1), std::end($1); }
 |                                                                                     { $$ = nullptr; }
;

LDecls : Decl LDecls                                                                   { $$.push_back($1); $$.insert(std::end($$), std::begin($2), std::end($2); }
 | Decl                                                                                { $$.push_back($1); }
;

Decl : ClassDecl                                                                       { $$ = $1; }
 | ObjectDecl                                                                          { $$ = $1; }
;

/* Parameter declaration*/

LOptParamDecl : LParamDecl                                                             { $$ = new std::vector<Parameter*>(); $$->insert(std::end(*$$), std::begin($1), std::end($1); }
 |                                                                                     { $$ = nullptr; }
;

LParamDecl : ParamDecl ',' LParamDecl                                                  { $$.push_back($1); $$.insert(std::end($$), std::begin($2), std::end($2); }
 | ParamDecl                                                                           { $$.push_back($1); }	
;

ParamDecl : OptVar IDENTIFIER ':' TYPENAME                                             { $$ = Parameter($1, $2, $3); }
;

OptVar : VAR                                                                           { $$ = true; }
 |                                                                                     { $$ = false; }
;

/* ===== Class ===== */

ClassDecl : CLASS TYPENAME '(' LOptParamDecl ')' OptExtends IS '{' ClassDef '}'        { $$ = new Class($2, $4, $6, std::get<0>($9), std::get<1>($9), std::get<2>($9)); }
;

OptExtends : EXTENDS TYPENAME                                                          { $$ = new std::string($2); }
 |                                                                                     { $$ = nullptr; }
;

ClassDef : LOptField ClassConstructor LOptMethod                                       { $$ = std::make_tuple($1, $2, $3); }
;

ClassConstructor : DEF TYPENAME '(' LOptParamDecl ')' OptSuper IS Bloc                 { $$ = Constructor($2, $4, $6, $8); }
;

OptSuper : ':' TYPENAME '(' LOptParam ')'                                              { $$ = new Constructor($2, $4, nullptr); }
 |
;

/* ===== Object ===== */

ObjectDecl : OBJECT TYPENAME IS '{' ObjectDef '}'                                      { $$ = new Object($2, std::get<0>($5), std::get<1>($5), std::get<2>($5)); }
;

ObjectDef : LOptField ObjectConstructor LOptMethod                                     { $$ = std::make_tuple($1, $2, $3); }
;

ObjectConstructor : DEF TYPENAME IS Bloc                                               { $$ = Constructor($2, std::vector<Parameter*>(), nullptr, $4); }
;

/* ===== Champ ===== */

LOptField : LField                                                                     { $$ = new std::vector<Field*>(); $$->insert(std::end(*$$), std::begin($1), std::end($1)); }
|                                                                                      { $$ = nullptr; }
;

LField : Field LField                                                                  { $$.push_back($1); $$.insert(std::end(*$$), std::begin($1), std::end($1)); }
| Field                                                                                { $$.push_back($1); }  
;

Field : VAR IDENTIFIER ':' TYPENAME ';'                                                { $$ = Field($2, $4); }
;

/* ===== Method ===== */

LOptMethod : LMethod                                                                   { $$ = new std::vector<Method>(); $$->insert(std::end(*$$), std::begin($1), std::end($1)); }
 |                                                                                     { $$ = nullptr; }
;

LMethod : Method LMethod                                                               { $$.push_back($1); $$.insert(std::end(*$$), std::begin($1), std::end($1)); }
 | Method                                                                              { $$.push_back($1); }
;

Method : OptOverride DEF IDENTIFIER '(' LOptParamDecl ')' ':' TYPENAME ASSIGNMENT Expr { $$ = Method($1, $3, $5, $8, $10); } // TODO faire mieux eXPR
 | OptOverride DEF IDENTIFIER '(' LOptParamDecl ')' OptReturn IS Bloc                  { $$ = Method($1, $3, $5, $8, $10); }
;

OptOverride : OVERRIDE                                                                 { $$ = true; }
 |                                                                                     { $$ = false; }
;

OptReturn : ':' TYPENAME                                                               { $$ = $2; }
 |                                                                                     { $$ = ""; }
;

/* ===== Instruction ===== */

LOptInst : LInst
 |
;

LInst : Inst LInst
 | Inst
;

Inst : Expr ';'
 | Bloc
 | RETURN ';'
 | Expr ASSIGNMENT Expr ';'
 | IF Expr THEN Inst ELSE Inst
;

Bloc : '{' LOptInst '}'
 | '{' LOptVarDecl IS LInst '}'
;

/* Declaration variable */

LOptVarDecl : LVarDecl
 |
;

LVarDecl : VarDecl LVarDecl
 | VarDecl
;

VarDecl : IDENTIFIER ':' TYPENAME ASSIGNMENT Expr ';'
 | IDENTIFIER ':' TYPENAME ';'
;

/* ===== Expression ===== */

Expr : Expr RELATIONAL_OPERATOR Expr              // {(Tree) {lineo, 3, $1, $2, $3};}
 | Expr '+' Expr                                  // {(Tree) {lineo, 3, $1, $2, $3};} 
 | Expr '-' Expr                                  // {(Tree) {lineo, 3, $1, $2, $3};} 
 | Expr '*' Expr                                  // {(Tree) {lineo, 3, $1, $2, $3};}
 | Expr '/' Expr                                  // {(Tree) {lineo, 3, $1, $2, $3};}
 | NEW TYPENAME '(' LOptParam ')'                 // {(Tree) {lineo, 3, $1, $2, $4};}
 | '+' Expr %prec unary                           // {(Tree) {lineo, 2, $2}; }
 | '-' Expr %prec unary                           // {(Tree) {lineo, 2, $2}; }
 | '(' TYPENAME Expr ')'                          // {(Tree) {lineo, 2, $1, $2}; }
 | Expr '.' IDENTIFIER                            // {(Tree) {lineo, 3, $1,$2, $3}; }
 | TYPENAME '.' IDENTIFIER                        // {(Tree) {lineo, 3, $1,$2, $3}; }
 | Expr '.' IDENTIFIER '(' LOptParam ')'          // {(Tree) {lineo, 3, $1,$2, $3}; }
 | TYPENAME '.' IDENTIFIER '(' LOptParam ')'      // {(Tree) {lineo, 4, $1,$2, $3, $5}; }
 | '(' Expr ')'                                   // {(Tree) {lineo, 1, $2}; }
 | INTEGER                                        // {(Tree) {lineo, 1, $1}; }
 | STRING                                         // {(Tree) {lineo, 1, $1}; }
 | IDENTIFIER                                     // {(Tree) {lineo, 1, $1}; }
;


LOptParam : LParam   // { $$ = $1 }
|                    // { $$ = nullptr; }
;

LParam : Param ',' LParam   // { $$ = (Tree) {lineo, 2, $1, $3};}
| Param                     // { $$ = (Tree) {lineo, 2, $1, nullptr}; }
;

Param : Expr
;

%%

#ifdef BISON_MAIN

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

#include <iostream>

int main(int argc, char **argv) {
	int fi;
	if ((fi = open(argv[1], O_RDONLY)) == -1) {
		std::cerr << "Erreur: fichier inaccessible " << argv[1] << std::endl;
		exit(1);
	}
	std::cout << "Fichier " << argv[1] << " chargé correctement." << std::endl;
	close(0); dup(fi); close(fi);
	if (yyparse() == 0) {
		std::cout << "Compilation succeed!" << std::endl;
		return 0;
	}
	return -1;
}

#endif