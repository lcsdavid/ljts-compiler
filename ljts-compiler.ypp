/* Tokens placés en ordre alphabétique pour mieux si retrouver. */
%token ASSIGNMENT CLASS
%token DEF ELSE EXTENDS
%token <String> IDENTIFIER 
%token IF
%token <Integer> INTEGER
%token IS NEW OBJECT OVERRIDE
%token <Integer> RELATIONAL_OPERATOR
%token RETURN
%token <String> STRING
%token THEN THIS
%token <String> TYPENAME
%token VAR

%type <Boolean> OptVar OptOverride
%type <String> OptExtends OptReturn

%type <PParamList> LOptParamDecl LParamDecl
%type <PParam> ParamDecl
%type <PVarList> LOptVar LVar LOptField LField
%type <PVar> Var Field

/* Types */
%type <PTypeList> LOptDecls LDecls
%type <PType> Decl
%type <PClass> Class
%type <PObject> Object

/* Methods */
%type <MethodList> LOptMethod LMethod
%type <PMethod> Method ClassConstructor ObjectConstructor 

/* Instructions & Expressions */
%type <PTreeList> LOptInst LInst LOptExpr LExpr
%type <PTree> Inst Expr MemberAccess MethodCall
%type <PBlock> Block

%{
#define YYDEBUG 1
#include "ljts-compiler.hpp"
using namespace std::string_literals;
%}
%debug
%error-verbose

%right ASSIGNMENT
%right ELSE
%left RELATIONAL_OPERATOR
%left '+' '-'
%left '*' '/'
%nonassoc unary NEW
%left '.'

%%
Program : LOptDecls Block { Program program(*$1, $2); std::cout << program; }
;

LOptDecls : LDecls		{ $$ = $1; }
 |						{ $$ = new std::vector<Type*>(); }
;

LDecls : Decl LDecls	{ $$ = $2; $$->insert($$->begin(), $1); }
 | Decl					{ $$ = new std::vector<Type*>({$1}); }
;

Decl : Class	{ $$ = $1; }
 | Object		{ $$ = $1; }
;

/* Variable declaration */

LOptParamDecl : LParamDecl					{ $$ = $1; }
 |											{ $$ = new std::vector<Parameter>(); }
;

LParamDecl : ParamDecl ',' LParamDecl		{ $$ = $3; $$->insert($$->begin(), *$1); }
 | ParamDecl								{ $$ = new std::vector<Parameter>({*$1}); }
;

ParamDecl : OptVar IDENTIFIER ':' TYPENAME	{ $$ = new Parameter($1, *$2, *$4); }
;

OptVar : VAR	{ $$ = true; }
 |				{ $$ = false; }
;

/* ===== Class ===== */

Class : CLASS TYPENAME '(' LOptParamDecl ')' OptExtends IS '{' LOptField ClassConstructor LOptMethod '}'	{ $$ = new Class(*$2, *$4, *$6, *$9, *(ClassConstructor*)$10, *$11); };

OptExtends : EXTENDS TYPENAME	{ $$ = $2; }
 |								{ $$ = new std::string(); }
;

ClassConstructor : DEF TYPENAME '(' LOptParamDecl ')' ':' TYPENAME '(' LOptExpr ')' IS Block	{ $$ = new ClassConstructor(*$2, *$4, new Tree(yylineno, instanciation, *$7, *$9), $12); }
 | DEF TYPENAME '(' LOptParamDecl ')' IS Block													{ $$ = new ClassConstructor(*$2, *$4, nullptr, $7); }
;

/* ===== Object ===== */

Object : OBJECT TYPENAME IS '{' LOptField ObjectConstructor LOptMethod '}'	{ $$ = new Object(*$2, *$5, *(ObjectConstructor*)$6, *$7); };

ObjectConstructor : DEF TYPENAME IS Block	{ $$ = new ObjectConstructor(*$2, $4); };

/* ===== Champ ===== */

LOptField : LField						{ $$ = $1; }
 |										{ $$ = new std::vector<Variable>(); }
;

LField : Field LField					{ $$ = $2; $$->insert($$->begin(), *$1); }
 | Field								{ $$ = new std::vector<Variable>({*$1}); }
;

Field : VAR IDENTIFIER ':' TYPENAME ';'	{ $$ = new Variable(*$2, *$4); }
;

/* ===== Method ===== */

LOptMethod : LMethod		{ $$ = $1; }
 |							{ $$ = new std::vector<Method>(); }
;

LMethod : Method LMethod	{ $$ = $2; $$->insert($$->begin(), *$1); }
 | Method					{ $$ = new std::vector<Method>({*$1}); }
;

Method : OptOverride DEF IDENTIFIER '(' LOptParamDecl ')' ':' TYPENAME ASSIGNMENT Expr	{ $$ = new Method($1, *$3, *$5, *$8, $10); }
 | OptOverride DEF IDENTIFIER '(' LOptParamDecl ')' OptReturn IS Block					{ $$ = new Method($1, *$3, *$5, *$7, $9); }
;

OptOverride : OVERRIDE	{ $$ = true; }
 |						{ $$ = false; }
;

OptReturn : ':' TYPENAME	{ $$ = $2; }
 |							{ $$ = new std::string(); }
;

/* ===== Instruction ===== */

LOptInst : LInst	{ $$ = $1; }
 |					{ $$ = new std::vector<Tree*>(); }
;

LInst : Inst LInst	{ $$ = $2; $$->insert($$->begin(), $1); }
 | Inst				{ $$ = new std::vector<Tree*>({$1}); }
;

Inst : Expr ';'					{ $$ = $1; }
 | Block						{ $$ = new Tree(yylineno, inst_block, $1); }
 | RETURN ';'					{ $$ = new Tree(yylineno, return_call); }
 | Expr ASSIGNMENT Expr ';'		{ $$ = new Tree(yylineno, assignment, { $1, $3 }); }
 | IF Expr THEN Inst ELSE Inst	{ $$ = new Tree(yylineno, if_then_else, { $2, $4, $6 }); }
;

/* Block */

Block : '{' LOptInst '}'		{ $$ = new Block(std::vector<Variable>(), *$2);}
 | '{' LOptVar IS LInst '}'		{ $$ = new Block(*$2, *$4); }
;

/* Declaration variable */

LOptVar : LVar	{ $$ = $1; }
 |				{ $$ = new std::vector<Variable>();}
;

LVar : Var LVar	{ $$ = $2; $$->insert($$->begin(), *$1); }
 | Var			{ $$ = new std::vector<Variable>({*$1}); }
;

Var : IDENTIFIER ':' TYPENAME ASSIGNMENT Expr ';'	{ $$ = new Variable(*$1, *$3/*, $5*/); }
 | IDENTIFIER ':' TYPENAME ';'						{ $$ = new Variable(*$1, *$3); }
;

/* ===== Expression ===== */

LOptExpr : LExpr	{ $$ = $1; }
 |					{ $$ = new std::vector<Tree*>(); }
;

LExpr : Expr ',' LExpr	{ $$ = $3; $$->insert($$->begin(), $1);  }
 | Expr					{ $$ = new std::vector<Tree*>({$1}); }
;

Expr : Expr RELATIONAL_OPERATOR Expr	{ $$ = new Tree(yylineno, $2, { $1, $3 }); }
 | Expr '+' Expr						{ $$ = new Tree(yylineno, addition, { $1, $3 }); }
 | Expr '-' Expr						{ $$ = new Tree(yylineno, substraction, { $1, $3 }); } 
 | Expr '*' Expr						{ $$ = new Tree(yylineno, multiplication, { $1, $3 }); }
 | Expr '/' Expr						{ $$ = new Tree(yylineno, division, { $1, $3 }); }
 | '+' Expr %prec unary					{ $$ = new Tree(yylineno, unary_plus, { $2 }); }
 | '-' Expr %prec unary					{ $$ = new Tree(yylineno, unary_minus, { $2 }); }
 | '(' TYPENAME Expr ')'				{ $$ = new Tree(yylineno, cast, *$2, $3); }
 | NEW TYPENAME '(' LOptExpr ')'		{ $$ = new Tree(yylineno, instanciation, *$2, *$4); }
 | MemberAccess							{ $$ = $1; }
 | MethodCall							{ $$ = $1; }
 | '(' Expr ')'							{ $$ = $2; }
 | INTEGER								{ $$ = new Tree(yylineno, integer, $1); }
 | STRING								{ $$ = new Tree(yylineno, string, *$1); }
 | IDENTIFIER							{ $$ = new Tree(yylineno, identifier, *$1); }
 | THIS									{ $$ = new Tree(yylineno, identifier, "this"); }
;

MemberAccess : Expr '.' IDENTIFIER	{ $$ = new Tree(yylineno, member_access, $1, *$3); }
 | TYPENAME '.' IDENTIFIER			{ $$ = new Tree(yylineno, static_member_access, *$1, *$3); }
;

MethodCall : Expr '.' IDENTIFIER '(' LOptExpr ')'	{ $$ = new Tree(yylineno, method_call, $1, *$3, *$5); }
 | TYPENAME '.' IDENTIFIER '(' LOptExpr ')' 		{ $$ = new Tree(yylineno, static_method_call, *$1, *$3, *$5); }
;

%%

#ifdef BISON_MAIN

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

#include <iostream>

int main(int argc, char **argv) {
	int fi;
	if ((fi = open(argv[1], O_RDONLY)) == -1) {
		std::cerr << "Erreur: fichier inaccessible " << argv[1] << std::endl;
		exit(1);
	}
	std::cout << "Fichier " << argv[1] << " chargé correctement." << std::endl;
	close(0); dup(fi); close(fi);
	if (yyparse() == 0) {
		std::cout << "Compilation succeed!" << std::endl;
		return 0;
	}
	return -1;
}

#endif