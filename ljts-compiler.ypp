/* Tokens placés en ordre alphabétique pour mieux si retrouver. */
%token ASSIGNMENT CLASS
%token DEF ELSE EXTENDS
%token <std::string> IDENTIFIER 
%token IF
%token <int> INTEGER
%token IS NEW OBJECT OVERRIDE
%token <int> RELATIONAL_OPERATOR
%token RETURN
%token <std::string> STRING
%token THEN 
%token <std::string> TYPENAME
%token VAR

/* Declarations */
%type <std::vector<Type*>> LOptDecls LDecls
%type <Type*> Decl

/* Parameters */
%type <std::vector<Parameter>> LOptParamDecl LParamDecl
%type <Parameter> ParamDecl
%type <bool> OptVar

/* Classes */
%type <Class*> ClassDecl
%type <std::string*> OptExtends

/* Objects */
%type <Object*> ObjectDecl

/* Fields */
%type <std::vector<Variable>> LOptField LField
%type <Variable> Field

/* Constructors */
%type <ClassConstructor> ClassConstructor
%type <std::tuple<std::string, std::string*>*> OptSuper
%type <Constructor> ObjectConstructor

/* Methods */
%type <std::vector<Method>> LOptMethod LMethod
%type <Method> Method
%type <bool> OptOverride
%type <std::string*> OptReturn

/* Block */
%type <std::variant<std::vector<Tree>*, std::tuple<std::vector<Tree>*, std::vector<Tree>>>> Block

/* Instructions */
%type <std::vector<Tree>> LOptInst LInst
%type <Tree> Inst

/* Declaration variable */
%type <std::vector<Variable>> LOptVarDecl LVarDecl
%type <Variable> VarDecl

/* Expressions */
%type <std::vector<Tree>> LOptExpr LExpr
%type <Tree> Expr

%{

#define YYDEBUG 1

#include "ljts-compiler.hpp"

void* program = nullptr;

%}
%language "c++"
%define api.value.type variant

%debug
%error-verbose

%right ASSIGNMENT
%right ELSE
%left RELATIONAL_OPERATOR
%left '+' '-'
%left '*' '/'
%nonassoc unary NEW
%left '.'

%%
Program : LOptDecls Block { /*program = new Program($1, $2);*/ }
;

LOptDecls : LDecls   { $$ = $1; }
 |                   { }
;

LDecls : Decl LDecls { $$.push_back($1); $$.insert(std::end($$), std::begin($2), std::end($2); }
 | Decl              { $$.push_back($1); }
;

Decl : ClassDecl     { $$ = $1; }
 | ObjectDecl        { $$ = $1; }
;

/* Parameter declaration */

LOptParamDecl : LParamDecl                 { $$ = $1; }
 |                                         { }
;

LParamDecl : ParamDecl ',' LParamDecl      { $$.push_back($1); $$.insert(std::end($$), std::begin($3), std::end($3); }
 | ParamDecl                               { $$.push_back($1); }	
;

ParamDecl : OptVar IDENTIFIER ':' TYPENAME { $$ = Parameter($1, $2, $4); }
;

OptVar : VAR                               { $$ = true; }
 |                                         { $$ = false; }
;

/* ===== Class ===== */

ClassDecl : CLASS TYPENAME '(' LOptParamDecl ')' OptExtends IS '{' LOptField ClassConstructor LOptMethod '}' { $$ = new Class($2, $4, $6, $9, $10, $11); }
;

OptExtends : EXTENDS TYPENAME                                                                                { $$ = new std::string($2); }
 |                                                                                                           { $$ = nullptr; }
;

ClassConstructor : DEF TYPENAME '(' LOptParamDecl ')' OptSuper IS Block                                      { $$ = Constructor($2, $4, $6, $8); }
;

OptSuper : ':' TYPENAME '(' LOptExpr ')'                                                                     { $$ = new Constructor($2, $4, nullptr); }
 |
;

/* ===== Object ===== */

ObjectDecl : OBJECT TYPENAME IS '{' LOptField ObjectConstructor LOptMethod '}' { $$ = new Object($2, $5, $6, $7); }
;

ObjectConstructor : DEF TYPENAME IS Block                                      { $$ = Constructor($2, std::vector<Parameter>(), nullptr, $4); }
;

/* ===== Champ ===== */

LOptField : LField                      { $$ = $1; }
|                                       { }
;

LField : Field LField                   { $$.push_back($1); $$.insert(std::end($$), std::begin($2), std::end($2)); }
| Field                                 { $$.push_back($1); }  
;

Field : VAR IDENTIFIER ':' TYPENAME ';' { $$ = Field($2, $4); }
;

/* ===== Method ===== */

LOptMethod : LMethod                                                                   { $$ = new std::vector<Method>($1); }
 |                                                                                     { $$ = nullptr; }
;

LMethod : Method LMethod                                                               { $$.push_back($1); $$.insert(std::end($$), std::begin($2), std::end($2)); }
 | Method                                                                              { $$.push_back($1); }
;

Method : OptOverride DEF IDENTIFIER '(' LOptParamDecl ')' ':' TYPENAME ASSIGNMENT Expr { $$ = Method($1, $3, $5, $8, $10); } // TODO faire mieux eXPR
 | OptOverride DEF IDENTIFIER '(' LOptParamDecl ')' OptReturn IS Block                 { $$ = Method($1, $3, $5, $7, $9); }
;

OptOverride : OVERRIDE                                                                 { $$ = true; }
 |                                                                                     { $$ = false; }
;

OptReturn : ':' TYPENAME                                                               { $$ = new std::string($2); }
 |                                                                                     { $$ = nullptr; }
;

/* ===== Instruction ===== */

LOptInst : LInst               { $$ = $1; }
 |                             { }
;

LInst : Inst LInst             { $$.push_back($1); $$.insert(std::end($$), std::begin($2), std::end($2)); }
 | Inst                        { $$.push_back($1); }
;

Inst : Expr ';'                { $$ = $1; }
 | Block                       { /* TODO BLOC */ }
 | RETURN ';'                  { $$ = Tree(/* return op code */); }
 | Expr ASSIGNMENT Expr ';'    { $$ = Tree(assignement, $1, $3); }
 | IF Expr THEN Inst ELSE Inst { $$ = Tree(if_then_else, $2, $4, $6); }
;

/* Block */

Block : '{' LOptInst '}'        { /* BLOC ? */ }
 | '{' LOptVarDecl IS LInst '}' { /* BLOC ? */ }
;

/* Declaration variable */

LOptVarDecl : LVarDecl                                { $$ = $1; }
 |                                                    { }
;

LVarDecl : VarDecl LVarDecl                           { $$.push_back($1); $$.insert(std::end($$), std::begin($2), std::end($2)); } 
 | VarDecl                                            { $$.push_back($1); }
;

VarDecl : IDENTIFIER ':' TYPENAME ASSIGNMENT Expr ';' { $$ = Variable($1, $3, $5); } 
 | IDENTIFIER ':' TYPENAME ';'                        { $$ = Variable($1, $3); }
;

/* ===== Expression ===== */

LOptExpr : LExpr       { $$ = $1; }
|                      { }
;

LExpr : Expr ',' LExpr { $$.push_back($1); $$.insert(std::end($$), std::begin($3), std::end($3));  }
| Expr                 { $$ = $1; }
;

Expr : Expr RELATIONAL_OPERATOR Expr        { $$ = Tree(/*yylineno,*/ $2, $1, $3); }
 | Expr '+' Expr                            { $$ = Tree(/*yylineno,*/ addition, $1, $3); } 
 | Expr '-' Expr                            { $$ = Tree(/*yylineno,*/ substration, $1, $3); } 
 | Expr '*' Expr                            { $$ = Tree(/*yylineno,*/ multiplication, $1, $3); }
 | Expr '/' Expr                            { $$ = Tree(/*yylineno,*/ division, $1, $3); }
 | NEW TYPENAME '(' LOptExpr ')'            { $$ = Tree(/*yylineno,*/ instanciation, $2, $4);}
 | '+' Expr %prec unary                     { $$ = Tree(/*yylineno,*/ unary_plus, $2); }
 | '-' Expr %prec unary                     { $$ = Tree(/*yylineno,*/ unary_substract, $2); }
 | '(' TYPENAME Expr ')'                    { $$ = Tree(/*yylineno,*/ cast, $2, $3); }
 | Expr '.' IDENTIFIER                      { $$ = Tree(/*yylineno,*/ member_access, $1, $3); }
 | TYPENAME '.' IDENTIFIER                  { $$ = Tree(/*yylineno,*/ member_access, $1, $3); }
 | Expr '.' IDENTIFIER '(' LOptExpr ')'     { $$ = Tree(/*yylineno,*/ method_call, $1, $3, $5); }
 | TYPENAME '.' IDENTIFIER '(' LOptExpr ')' { $$ = Tree(/*yylineno,*/ method_call, $1, $3, $5); }
 | '(' Expr ')'                             { $$ = $2; }
 | INTEGER                                  { $$ = Tree(/*yylineno,*/ integer, $1); }
 | STRING                                   { $$ = Tree(/*yylineno,*/ string, $1); }
 | IDENTIFIER                               { $$ = Tree(/*yylineno,*/ identifier, $1); }
;

%%

#ifdef BISON_MAIN

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

#include <iostream>

int main(int argc, char **argv) {
	int fi;
	if ((fi = open(argv[1], O_RDONLY)) == -1) {
		std::cerr << "Erreur: fichier inaccessible " << argv[1] << std::endl;
		exit(1);
	}
	std::cout << "Fichier " << argv[1] << " chargé correctement." << std::endl;
	close(0); dup(fi); close(fi);
	if (yyparse() == 0) {
		std::cout << "Compilation succeed!" << std::endl;
		return 0;
	}
	return -1;
}

#endif